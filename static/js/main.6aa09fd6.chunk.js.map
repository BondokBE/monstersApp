{"version":3,"sources":["components/card/card_component.jsx","components/card_list/card_list_component.jsx","components/search_box/search_box.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","React","Component","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uVAKaA,G,kBAAO,SAAAC,GAAK,OACvB,yBAAKC,UAAU,kBAEb,yBACEC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEL,gCAAML,EAAMI,QAAQE,KAApB,KACA,+BAAKN,EAAMI,QAAQG,MAAnB,QCPSC,GDasBC,IAAMC,UCbjB,SAAAV,GAAK,OAE3B,yBAAKC,UAAU,aAEXD,EAAMW,SAASC,KACb,SAAAR,GAAO,OAAI,kBAAC,EAAD,CAAMS,IAAKT,EAAQC,GAAID,QAASA,UCNtCU,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACvB,2BACEf,UAAU,SACVgB,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC6CCG,E,YA9Cb,aAAe,IAAD,8BACZ,+CAgBFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAhBtC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IAJH,E,iFASO,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAE1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEV,SAAUmB,S,+BAQjC,IAAD,EAC2BC,KAAKN,MAA/Bd,EADD,EACCA,SAAUW,EADX,EACWA,YACZU,EAAmBrB,EAASsB,QAAO,SAAA7B,GAAO,OAC9CA,EAAQE,KAAK4B,cAAcC,SAASb,EAAYY,kBAMlD,OACE,yBAAKjC,UAAU,OACb,+CACA,kBAAC,EAAD,CACEc,YAAY,iBACZC,aAAce,KAAKf,eAErB,kBAAC,EAAD,CAAUL,SAAUqB,GACjBD,KAAKN,MAAMd,SAASC,KAAI,SAAAR,GAAO,OAAI,wBAAIS,IAAKT,EAAQC,IAAjB,IAAuBD,EAAQE,KAA/B,c,GAvC5BI,aCIE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6aa09fd6.chunk.js","sourcesContent":["/* jshint esversion: 9 */\r\n\r\nimport React from 'react';\r\nimport './card.css'\r\n\r\nexport const Card = props => (\r\n  <div className='card-container'>\r\n    {/* {console.log(props.monster.name)} */}\r\n    <img \r\n      alt='monster'\r\n      src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n    />\r\n    <h2> {props.monster.name} </h2>\r\n    <p> {props.monster.email} </p>\r\n  </div>\r\n);\r\n\r\n//* the same and it works\r\n\r\nexport default class Card2 extends React.Component {\r\n  render() {\r\n    return(\r\n      <div className='card-container'>\r\n        {console.log(this.props.monster.name)}\r\n        <h2> {this.props.monster.name} </h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","/* jshint esversion:9 */\r\nimport React from 'react';\r\nimport './card_list.css';\r\nimport {Card} from '../card/card_component';\r\n\r\n\r\nexport const CardList = props => (\r\n  // console.log(props);\r\n  <div className='card-list'>\r\n    {\r\n      props.monsters.map(\r\n        monster => <Card key={monster.id} monster={monster} />\r\n      )\r\n    }\r\n  </div>\r\n);","/* jshint esversion:9 */\r\n\r\nimport React from 'react';\r\nimport './search_box.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n  <input \r\n    className='search'\r\n    type='search' \r\n    placeholder={placeholder} \r\n    onChange={handleChange} \r\n  />\r\n);\r\n\r\n","/* jshint esversion: 8 */\n\nimport React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport { CardList } from './components/card_list/card_list_component';\nimport { SearchBox } from './components/search_box/search_box';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: '',\n    };\n\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    // .then(response => console.log(response));\n    .then(users => this.setState({ monsters: users }));\n  }\n\n  // remember to use arrow function to noe rebind \"this\" keyword\n  handleChange = e => {\n    this.setState({ searchField: e.target.value });\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    \n    // filteredMonsters.forEach(monster => console.log(monster));\n    // console.log(Object.prototype.toString.call(filteredMonsters));\n\n    return (\n      <div className=\"App\">\n        <h1>Monster Rolodex</h1>\n        <SearchBox\n          placeholder=\"Search Monster\" \n          handleChange={this.handleChange}  \n        />\n        <CardList monsters={filteredMonsters}>\n          {this.state.monsters.map(monster => <h2 key={monster.id}> {monster.name} </h2>)}\n        </CardList>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/* jshint esversion:9 */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}